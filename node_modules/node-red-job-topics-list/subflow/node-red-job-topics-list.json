{
    "id": "0eb6c089a1f171e9",
    "type": "subflow",
    "name": "topics-list",
    "info": "",
    "category": "Topic Control",
    "in": [
        {
            "x": 60,
            "y": 80,
            "wires": [
                {
                    "id": "126cbf276ed23332"
                }
            ]
        }
    ],
    "out": [
        {
            "x": 340,
            "y": 80,
            "wires": [
                {
                    "id": "126cbf276ed23332",
                    "port": 0
                }
            ]
        }
    ],
    "env": [
        {
            "name": "statusPath",
            "type": "str",
            "value": "status"
        }
    ],
    "meta": {
        "module": "node-red-job-topics-list",
        "type": "topics-list",
        "version": "0.0.1",
        "license": "MIT"
    },
    "color": "#DEB887",
    "icon": "node-red/db.svg",
    "flow": [
        {
            "id": "126cbf276ed23332",
            "type": "function",
            "z": "0eb6c089a1f171e9",
            "name": "topics_list",
            "func": "//{topicname:[{name:\"\",status: \"new\"}]}\n\nconst statusPath = env.get(\"statusPath\") //ex.msg.status\nconst selectStatus = RED.util.getPropByPath(msg, statusPath) || \"new\"\n\nconst topics = global.get(\"TOPICS\") || new Map()\nconst topics_list = new Array()\n\nfor (const [topicName, topicStatus] of topics) {\n    const topic_new = topicStatus.get(selectStatus) || new Map()\n    if (topic_new.size > 0) topics_list.push(topicName)\n}\n\nmsg = Object.assign(msg, { payload: { list: topics_list } });\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 200,
            "y": 80,
            "wires": [
                []
            ]
        }
    ]
}