{
    "id": "b1626fc28a971f31",
    "type": "subflow",
    "name": "split-array",
    "info": "",
    "category": "",
    "in": [
        {
            "x": 40,
            "y": 80,
            "wires": [
                {
                    "id": "210c38446e598771"
                }
            ]
        }
    ],
    "out": [
        {
            "x": 340,
            "y": 80,
            "wires": [
                {
                    "id": "210c38446e598771",
                    "port": 0
                }
            ]
        }
    ],
    "env": [
        {
            "name": "inputArrayPath",
            "type": "str",
            "value": "payload.list"
        },
        {
            "name": "outputPath",
            "type": "str",
            "value": "payload.topic"
        }
    ],
    "meta": {
        "module": "node-red-job-split-array",
        "type": "split-array",
        "version": "0.0.1",
        "license": "MIT"
    },
    "color": "#E2D96E",
    "icon": "node-red/split.svg",
    "flow": [
        {
            "id": "210c38446e598771",
            "type": "function",
            "z": "b1626fc28a971f31",
            "name": "split-array",
            "func": "\nconst inputArrayPath = env.get(\"inputArrayPath\") //ex.msg.payload.topic \nconst list = RED.util.getPropByPath(msg, inputArrayPath)//{topic: \"\",param: { }}\nconst outputPath = env.get(\"outputPath\") //ex.msg.payload.topic \n\nfor (const key in list) {\n    const retmsg = RED.util.setPropByPath(msg, outputPath, list[key])\n    node.send(retmsg);\n}\n\n//node.done();\nreturn;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 180,
            "y": 80,
            "wires": [
                []
            ]
        }
    ]
}