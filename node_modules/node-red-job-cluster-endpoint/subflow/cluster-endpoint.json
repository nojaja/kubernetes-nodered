[
    {
        "id": "0cd70b49340abfe2",
        "type": "subflow",
        "name": "cluster_endpoint",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 540,
                "y": 80,
                "wires": [
                    {
                        "id": "20dcaeb9b3ab0ad1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "endpoint_port",
                "type": "str",
                "value": "2880"
            }
        ],
        "meta": {
            "module": "cluster-endpoint",
            "type": "cluster-endpoint"
        },
        "color": "#A6BBCF",
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "870573ecbe68ee62",
        "type": "udp in",
        "z": "0cd70b49340abfe2",
        "name": "",
        "iface": "",
        "port": "${endpoint_port}",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "20dcaeb9b3ab0ad1"
            ]
        ]
    },
    {
        "id": "20dcaeb9b3ab0ad1",
        "type": "function",
        "z": "0cd70b49340abfe2",
        "name": "payload decode",
        "func": "msg.payload = JSON.parse(msg.payload)\nif (!msg.payload.CLUSTER_SERVICE_IP) msg.payload.CLUSTER_SERVICE_IP = msg.ip\n\nconst CLUSTER_GROUP = env.get(\"CLUSTER_GROUP\")\n\n//同じグループじゃない場合は処理しない\nif (msg.payload.CLUSTER_GROUP != CLUSTER_GROUP) return null\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            []
        ]
    }
]