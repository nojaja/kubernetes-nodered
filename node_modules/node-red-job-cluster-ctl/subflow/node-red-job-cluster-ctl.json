{
    "id": "610d7761aec803a7",
    "type": "subflow",
    "name": "cluster-ctl",
    "info": "",
    "category": "",
    "in": [
        {
            "x": 50,
            "y": 30,
            "wires": [
                {
                    "id": "055a6b1f611eebc9"
                }
            ]
        }
    ],
    "out": [],
    "env": [
        {
            "name": "COMMAND",
            "type": "str",
            "value": ""
        },
        {
            "name": "BROADCAST",
            "type": "bool",
            "value": "true"
        }
    ],
    "meta": {
        "module": "node-red-job-cluster-ctl",
        "type": "cluster-ctl",
        "version": "0.0.1",
        "license": "MIT"
    },
    "color": "#A6BBCF",
    "icon": "node-red/bridge-dash.svg",
    "flow": [
        {
            "id": "7d45f678d4340e2f",
            "type": "udp out",
            "z": "610d7761aec803a7",
            "name": "send",
            "addr": "",
            "iface": "",
            "port": "2880",
            "ipv": "udp4",
            "outport": "",
            "base64": false,
            "multicast": "broad",
            "x": 970,
            "y": 100,
            "wires": []
        },
        {
            "id": "22cfd8a746e0d355",
            "type": "function",
            "z": "610d7761aec803a7",
            "name": "set broadcastAddress",
            "func": "msg.ip = msg.LocalAddress.broadcastAddress\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 740,
            "y": 80,
            "wires": [
                [
                    "7d45f678d4340e2f"
                ]
            ]
        },
        {
            "id": "ce61c2fe2072c316",
            "type": "function",
            "z": "610d7761aec803a7",
            "name": "set ip",
            "func": "//console.log(msg)\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [
                {
                    "var": "os",
                    "module": "os"
                },
                {
                    "var": "ip",
                    "module": "ip"
                }
            ],
            "x": 690,
            "y": 120,
            "wires": [
                [
                    "7d45f678d4340e2f"
                ]
            ]
        },
        {
            "id": "1c270b85f20694db",
            "type": "function",
            "z": "610d7761aec803a7",
            "name": "SEND COMMAND",
            "func": "const CLUSTER_SERVICE_HTTP_PORT = env.get(\"PORT\") || \"1880\"\nconst CLUSTER_SERVICE_UDP_PORT = env.get(\"UDPPORT\") || \"2880\"\n\nconst CLUSTER_GROUP = env.get(\"CLUSTER_GROUP\")\nconst CLUSTER_ROLE = env.get(\"CLUSTER_ROLE\")\n//const CLUSTER_SERVICE_HOST = env.get(\"KUBERNETES_SERVICE_HOST\")\nconst CLUSTER_SERVICE_IP = msg.LocalAddress.address\nconst CLUSTER_SERVICE_HOST = env.get(\"HOSTNAME\") || CLUSTER_SERVICE_IP\nconst NODE_RED_VERSION = env.get(\"NODE_RED_VERSION\")\nconst COMMAND = env.get(\"COMMAND\")\n\nmsg.payload = JSON.stringify({\n    \"COMMAND\": COMMAND,\n    \"CLUSTER_GROUP\": CLUSTER_GROUP,\n    \"CLUSTER_ROLE\": CLUSTER_ROLE,\n    \"CLUSTER_SERVICE_HOST\": CLUSTER_SERVICE_HOST,\n    \"CLUSTER_SERVICE_IP\": CLUSTER_SERVICE_IP,\n    \"CLUSTER_SERVICE_HTTP_PORT\": CLUSTER_SERVICE_HTTP_PORT,\n    \"CLUSTER_SERVICE_UDP_PORT\": CLUSTER_SERVICE_UDP_PORT,\n    \"NODE_RED_VERSION\": NODE_RED_VERSION,\n    \"PAYLOAD\": msg.payload\n})\nreturn msg",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [
                {
                    "var": "os",
                    "module": "os"
                }
            ],
            "x": 310,
            "y": 80,
            "wires": [
                [
                    "e304dc51216491e8"
                ]
            ]
        },
        {
            "id": "e304dc51216491e8",
            "type": "switch",
            "z": "610d7761aec803a7",
            "name": "isBROADCAST",
            "property": "BROADCAST",
            "propertyType": "env",
            "rules": [
                {
                    "t": "true"
                },
                {
                    "t": "false"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 2,
            "x": 520,
            "y": 80,
            "wires": [
                [
                    "22cfd8a746e0d355"
                ],
                [
                    "ce61c2fe2072c316"
                ]
            ]
        },
        {
            "id": "055a6b1f611eebc9",
            "type": "function",
            "z": "610d7761aec803a7",
            "name": "getLocalAddress",
            "func": "\n\n//ipv4: [ { name: 'eth0', address:\nmsg.LocalAddress = RED.util.getLocalAddress().ipv4[0]\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 190,
            "y": 40,
            "wires": [
                [
                    "1c270b85f20694db"
                ]
            ]
        }
    ]
}