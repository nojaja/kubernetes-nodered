{
    "id": "f5ba2b0f4e9255e0",
    "type": "subflow",
    "name": "topics-update",
    "info": "",
    "category": "",
    "in": [
        {
            "x": 40,
            "y": 80,
            "wires": [
                {
                    "id": "df88c0ce3abe7f11"
                }
            ]
        }
    ],
    "out": [
        {
            "x": 380,
            "y": 40,
            "wires": [
                {
                    "id": "df88c0ce3abe7f11",
                    "port": 0
                }
            ]
        },
        {
            "x": 380,
            "y": 100,
            "wires": [
                {
                    "id": "df88c0ce3abe7f11",
                    "port": 1
                }
            ]
        }
    ],
    "env": [
        {
            "name": "topicPath",
            "type": "str",
            "value": "topic"
        },
        {
            "name": "statusPath",
            "type": "str",
            "value": "status"
        },
        {
            "name": "uuidPath",
            "type": "str",
            "value": ""
        }
    ],
    "meta": {
        "module": "node-red-job-topics-update",
        "type": "topics-update",
        "version": "0.0.1",
        "license": "MIT"
    },
    "color": "#DEB887",
    "icon": "node-red/db.svg",
    "flow": [
        {
            "id": "df88c0ce3abe7f11",
            "type": "function",
            "z": "f5ba2b0f4e9255e0",
            "name": "topics_update",
            "func": "const topicPath = env.get(\"topicPath\") //ex.msg.status\nconst selectTopic = RED.util.getPropByPath(msg, topicPath)\n\nconst statusPath = env.get(\"statusPath\") //ex.msg.status\nconst selectStatus = RED.util.getPropByPath(msg, statusPath) || \"new\"\n\nconst uuidPath = env.get(\"uuidPath\") //ex.msg.status\nconst uuid = RED.util.getPropByPath(msg, uuidPath) || \"uuid\"\n\nconst statusFlow = {\n    \"new\": \"assigned\",\n    \"assigned\": \"in-progress\",\n    \"in-progress\": \"completed\"\n}\nconst nextStatus = statusFlow[selectStatus]\nconst topics = global.get(\"TOPICS\") || new Map()//{topicname:[{name:\"\",status: \"new\"}]}\nconst topicStatus = topics.get(selectTopic) || new Map()\nconst topic_new = topicStatus.get(selectStatus) || new Map()\nconst topic_proc = topicStatus.get(nextStatus) || new Map()\n\nconst topicTicket = topic_new.get(uuid)\nif (!topicTicket) return [null, msg]\nif (!topic_new.delete(uuid)) return [null, msg]\ntopicTicket.status = nextStatus\ntopic_proc.set(topicTicket.uuid, topicTicket)\n\ntopicStatus.set(selectStatus, topic_new) || new Array()\ntopicStatus.set(nextStatus, topic_proc) || new Array()\ntopics.set(selectTopic, topicStatus) || new Map()\nglobal.set(\"TOPICS\", topics) || new Map()\n\nmsg = Object.assign(msg, { payload: { topic: topicTicket.topic, topicTicket: JSON.stringify(topicTicket) } });\n\nreturn [msg, null]",
            "outputs": 2,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 200,
            "y": 80,
            "wires": [
                [],
                []
            ]
        }
    ]
}