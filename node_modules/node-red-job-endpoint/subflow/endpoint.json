[
    {
        "id": "27227cef106a74f0",
        "type": "subflow",
        "name": "endpoint",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 660,
                "y": 120,
                "wires": [
                    {
                        "id": "2be49eb745fa791d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "actionType",
                "type": "str",
                "value": "exec"
            },
            {
                "name": "endpoint",
                "type": "env",
                "value": "/${actionType}/:topic",
                "ui": {
                    "type": "hide"
                }
            }
        ],
        "meta": {
            "module": "node-red-endpoint",
            "type": "endpoint",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "ab279f5f2fd77d53",
        "type": "http in",
        "z": "27227cef106a74f0",
        "name": "endpoint",
        "url": "${endpoint}",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "87bd2ef55c481975"
            ]
        ]
    },
    {
        "id": "87bd2ef55c481975",
        "type": "change",
        "z": "27227cef106a74f0",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "req.params.topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "callbackhost",
                "pt": "msg",
                "to": "req.params.x-callback",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 60,
        "wires": [
            [
                "2be49eb745fa791d"
            ]
        ]
    },
    {
        "id": "d4ed8772713b75e0",
        "type": "template",
        "z": "27227cef106a74f0",
        "name": "Response-Page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "HOSTNAME: {{env.HOSTNAME}}\nNODE_RED_VERSION:{{env.NODE_RED_VERSION}}\njob-session: {{sobsession}}\ntarget: {{target}}\nCALLBACK HOST: {{callbackhost}}",
        "output": "str",
        "x": 720,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b2cb43138961ea29",
        "type": "http response",
        "z": "27227cef106a74f0",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "285f8f2fa8f0b214",
        "type": "function",
        "z": "27227cef106a74f0",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.topic,\n    \"callbackhost\": msg.callbackhost\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 240,
        "wires": [
            [
                "b2cb43138961ea29"
            ]
        ]
    },
    {
        "id": "2be49eb745fa791d",
        "type": "function",
        "z": "27227cef106a74f0",
        "name": "JSON.parse",
        "func": "if (msg.topic) {\n    try {\n        msg.topic = JSON.parse(msg.topic)\n    } catch (error) {\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 60,
        "wires": [
            [
                "285f8f2fa8f0b214"
            ]
        ]
    }
]