[
    {
        "id": "c826488602403262",
        "type": "subflow",
        "name": "topics-assign",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "18819cbac00ebaf8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 40,
                "wires": [
                    {
                        "id": "18819cbac00ebaf8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 380,
                "y": 100,
                "wires": [
                    {
                        "id": "18819cbac00ebaf8",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicPath",
                "type": "str",
                "value": "topic"
            },
            {
                "name": "statusPath",
                "type": "str",
                "value": "status"
            }
        ],
        "meta": {
            "module": "topics-assign",
            "type": "topics-assign"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "18819cbac00ebaf8",
        "type": "function",
        "z": "c826488602403262",
        "name": "topics_assign",
        "func": "\nconst topicPath = env.get(\"topicPath\") //ex.msg.status\nconst selectTopic = RED.util.getPropByPath(msg, topicPath)\n\nconst statusPath = env.get(\"statusPath\") //ex.msg.status\nconst selectStatus = RED.util.getPropByPath(msg, statusPath) || \"new\"\n\nconst statusFlow = {\n    \"new\": \"assigned\",\n    \"assigned\": \"in-progress\",\n    \"in-progress\": \"completed\"\n}\nconst nextStatus = statusFlow[selectStatus]\nconst topics = global.get(\"TOPICS\") || new Map()//{topicname:[{name:\"\",status: \"new\"}]}\nconst topicStatus = topics.get(selectTopic) || new Map()\nconst topic_new = topicStatus.get(selectStatus) || new Map()\nconst topic_proc = topicStatus.get(nextStatus) || new Map()\n\nconst topicTicket = RED.util.mappop(topic_new)\nif (!topicTicket) return [null, msg]\ntopicTicket.status = nextStatus\ntopic_proc.set(topicTicket.uuid, topicTicket)\n\ntopicStatus.set(selectStatus, topic_new)\ntopicStatus.set(nextStatus, topic_proc)\ntopics.set(selectTopic, topicStatus)\nglobal.set(\"TOPICS\", topics)\nmsg = Object.assign(msg, { payload: { topic: topicTicket.topic, topicTicket: topicTicket } });\n\nreturn [msg, null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    }
]